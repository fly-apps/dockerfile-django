{% if config.pinnedPythonVersion %}
# TODO: Change to an officially released version of Python before deploying to production.
{% endif %}
ARG PYTHON_VERSION={{ config.pythonVersion }}-slim-bullseye

FROM python:${PYTHON_VERSION}

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

{% if config.hasPostgres %}
# install psycopg2 dependencies.
RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

{% endif %}

RUN mkdir -p /code

WORKDIR /code

{% if config.pipenv %}
RUN pip install pipenv
COPY Pipfile Pipfile.lock /code/
RUN pipenv install --deploy --system
{% elif config.poetry %}
RUN pip install poetry
COPY pyproject.toml poetry.lock /code/
RUN poetry config virtualenvs.create false
RUN poetry install --only main --no-root --no-interaction
{% else %}
COPY requirements.txt /tmp/requirements.txt
RUN set -ex && \
    pip install --upgrade pip && \
    pip install -r /tmp/requirements.txt && \
    rm -rf /root/.cache/
{% endif %}

COPY . /code
{% if config.collectStatic %}
{% if not config.hasRandomSecretKey %}
ENV SECRET_KEY "{ config.randomSecretKey }"
{% endif %}
RUN python manage.py collectstatic --noinput
{% endif %}
EXPOSE 8000

{% if config.wsgiFound %}
CMD ["gunicorn", "--bind", ":8000", "--workers", "2", "{{ config.wsgiName }}.wsgi"]
{% else %}
# TODO: replace demo.wsgi with <project_name>.wsgi
CMD ["gunicorn", "--bind", ":8000", "--workers", "2", "demo.wsgi"]
{% endif %}
